https://www.saaspegasus.com/guides/modern-javascript-for-django-developers/integrating-javascript-pipeline/
    this was handy

reading https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html

author seems a bit crotchety

tuples are mutable, makes sense in the context of this being js but good to keep in mind

    "Function syntax includes parameter names. This is pretty hard to get used to!
        let fst: (a: any, b: any) => any = (a, b) => a;
        // or more precisely:
        let fst: <T, U>(a: T, b: U) => T = (a, b) => a;"

    "Note that inference will work in any order, but intellisense will only work left-to-right, so TypeScript prefers to declare map with the array first:
        declare function map<T, U>(ts: T[], f: (t: T) => U): U[];"

    const prevents reassignment
    readonly prevents a property from being reassigned

    ReadonlyArray<T>, neat

https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html
    less verbose

https://www.typescriptlang.org/docs/handbook/2/basic-types.html

    "one of TypeScript’s core values: much of the time, you will know better than TypeScript."
        ????????

    --noEmitOnError
        good

    always use lowercase string, number, boolean as opposed to eg String, Number

    number[] is an array of numbers

    interfaces are extensible, type aliases are not

ok i made it as far as https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions
and think i'm just gonna take a quick break and do aoc 2023 day 1

ok ez cool
back to https://www.typescriptlang.org/docs/handbook/2/everyday-types.html

    so "type assertions" are "as Foo"
    assertion is a weird name for them bc there is no runtime behavior
    instead i'd call them casts

    https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-inference

    this one's funky
    as "GET" or as const
    weird

    ! is dangerous, claims the value is non-null but with no extra runtime checking

cool
https://www.typescriptlang.org/docs/handbook/2/narrowing.html

    typeof checks are "type guards"

    https://www.typescriptlang.org/docs/handbook/2/narrowing.html#discriminated-unions

        nice i like this

ok i was working on part 2 but i have to go

ok interesting


  const digitWords = {
    "one": "1",
    "two": "2",
    "three": "3",
    "four": "4",
    "five": "5",
    "six": "6",
    "seven": "7",
    "eight": "8",
    "nine": "9",
  };

  const lines = rawLines.map((line) =>
    line.replace(
      /one|two|three|four|five|six|seven|eight|nine/g,
      (match) => digitWords[match],
    )
  );

that was complaining on this line
      (match) => digitWords[match],

bc `match` is a string, and string can't be used to index digitWords

so i was like, what can i do here

i tried doing digitWords[match as keyof digitWords],

but that didn't work bc digitWords is an object, not a type
but this works:
      (match) => digitWords[match as keyof typeof digitWords],

keyof typeof
neat!

ok so back to part 2
my solution isn't working
i think it's because for lines like this

eightwothree

they want you to turn it into 823
instead of 8wo3

hm
well maybe not
for instance my input has this line

1four2eightseven8one3eightwogrr

the eight doesn't matter
just the two

so i think what we want to do is
do two passes over each line
replace the first found worded digit from the left
and the first found one from the right

don't care about the middle

TODO how do i debug typescript in deno?

ok i guess that doesn't work

there must be a line somewhere that's like
zzzeightwozzz

oh well

ok done

so now let's figure out how to run+debug TS with deno + vscode

https://docs.deno.com/runtime/manual/references/vscode_deno#using-the-debugger

ok cool that works great
i'll have to tweak launch.json to target each new file i'm working on
but that seems ok

ok now let's read more typescript docs

https://www.typescriptlang.org/docs/handbook/2/functions.html

https://www.typescriptlang.org/docs/handbook/2/functions.html#call-signatures

GROSS
JESUS

this is interesting
https://www.typescriptlang.org/docs/handbook/2/functions.html#specifying-type-arguments
    const arr = combine<string | number>([1, 2, 3], ["hello"]);

neat

good advice about avoiding overuse of generics:

    Remember, type parameters are for relating the types of multiple values. If a
    type parameter is only used once in the function signature, it’s not relating
    anything.

ok, was about to start https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads

but let's do day 2 now

ok part 1 ez

back to docs
overloads are gross, don't do them

unknown is interesting

https://www.typescriptlang.org/docs/handbook/2/functions.html#parameter-destructuring this is good

ok cool done with fn page
next up i have these two tabs open
https://code.visualstudio.com/docs/typescript/typescript-tutorial
https://code.visualstudio.com/docs/languages/typescript
which one should i do? both?
the second one looks like a longer version of the first one

ok whatever i did the second one and it had no new info, nbd

ok day 2 part 2 done
tomorrow let's pick up again with https://www.typescriptlang.org/docs/handbook/2/objects.html

ok actually first let's do day 3

ok it's a grid with neighbors again

wow ok so typescript doesn't seem to have a range(5, 10) function
instead you have to do like
    console.log([...Array(5).keys()])
to do range (0, 5)
and i'm not sure yet how to do range (5, 10)

so anyway i'm trying to like
come up with a list of the coordinates of all symbols in this grid
and trying to start off by doing it in a functional way w map and stuff

i should be able to do this super easy w a couple forloops but i want to figure out how to do it this other way
so where do i start?

DONE rewrite grid stuff w class syntax?